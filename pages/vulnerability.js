document.addEventListener('DOMContentLoaded', () => {
  const vulnerabilitiesList = document.getElementById('vulnerabilitiesList');
  const clearBtn = document.getElementById('clearBtn');
  const backBtn = document.getElementById('backBtn');
  const tabs = document.querySelectorAll('.tab');

  // Load vulnerabilities
  loadVulnerabilities('all');

  // Back button functionality
  backBtn.addEventListener('click', () => {
    window.close();
  });

  // Tab switching
  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      tabs.forEach(t => t.classList.remove('active'));
      tab.classList.add('active');
      loadVulnerabilities(tab.dataset.filter);
    });
  });

  // Clear button
  clearBtn.addEventListener('click', () => {
    if (confirm('Are you sure you want to clear all findings?')) {
      chrome.runtime.sendMessage({ type: 'clear_vulnerabilities' }, () => {
        if (chrome.runtime.lastError) {
          console.error(chrome.runtime.lastError);
          return;
        }
        loadVulnerabilities(document.querySelector('.tab.active').dataset.filter);
      });
    }
  });

  function loadVulnerabilities(filter) {
    chrome.runtime.sendMessage({ type: 'get_vulnerabilities' }, (vulnerabilities) => {
      if (chrome.runtime.lastError) {
        console.error(chrome.runtime.lastError);
        return;
      }
      displayVulnerabilities(filterVulnerabilities(vulnerabilities || [], filter));
    });
  }

  function filterVulnerabilities(vulnerabilities, filter) {
    if (filter === 'all') return vulnerabilities;
    if (filter === 'xss') return vulnerabilities.filter(v => v.type.includes('XSS'));
    if (filter === 'csrf') return vulnerabilities.filter(v => v.type.includes('CSRF'));
    return vulnerabilities;
  }

  function displayVulnerabilities(vulnerabilities) {
    if (vulnerabilities.length === 0) {
      vulnerabilitiesList.innerHTML = `
        <div class="empty-state">
          <div class="empty-icon">🛡️</div>
          <h3>No vulnerabilities found</h3>
          <p>Browse the web to detect security issues</p>
        </div>
      `;
      return;
    }

    vulnerabilitiesList.innerHTML = vulnerabilities.map(vuln => `
      <div class="vulnerability">
        <div class="vulnerability-header">
          <div class="vulnerability-title ${vuln.type.includes('XSS') ? 'vulnerability-type-xss' : 'vulnerability-type-csrf'}">
            ${vuln.type}
          </div>
          <div class="severity severity-${vuln.severity || 'medium'}">
            ${vuln.severity || 'medium'}
          </div>
        </div>
        <div class="vulnerability-url">${vuln.url}</div>
        <div class="vulnerability-details">${
          typeof vuln.details === 'object' 
            ? JSON.stringify(vuln.details, null, 2) 
            : vuln.details || 'No additional details'
        }</div>
        <div class="vulnerability-meta">
          <span>Detected: ${new Date(vuln.timestamp).toLocaleString()}</span>
          <div class="status-badge status-${vuln.status || 'unverified'}">
            ${vuln.status || 'unverified'}
          </div>
        </div>
      </div>
    `).join('');
  }

  // Listen for new vulnerabilities
  chrome.runtime.onMessage.addListener((request) => {
    if (request.type === 'new_vulnerability') {
      loadVulnerabilities(document.querySelector('.tab.active').dataset.filter);
    }
  });
});